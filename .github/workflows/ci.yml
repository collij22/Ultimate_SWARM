name: Swarm1 CI

on:
  workflow_dispatch:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-verify:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    # Global env (no AUV_ID needed)
    env:
      STAGING_URL: http://127.0.0.1:3000
      API_BASE: http://127.0.0.1:3000/api

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install deps
        shell: bash
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm i
          fi

      - name: Install Playwright browsers + system deps
        shell: bash
        run: npx playwright install --with-deps

      # ---- Security Gates (Phase 6) ----
      - name: Install Semgrep
        shell: bash
        run: |
          python3 -m pip install semgrep
          semgrep --version

      - name: Run Semgrep security scan
        shell: bash
        run: |
          node orchestration/security/semgrep.mjs || exit_code=$?
          if [ "$exit_code" = "301" ]; then
            echo "::error::Security scan failed - high/critical findings detected"
            exit 1
          fi

      - name: Install Gitleaks
        shell: bash
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/
          gitleaks version

      - name: Run Gitleaks secret scan
        shell: bash
        run: |
          node orchestration/security/gitleaks.mjs || exit_code=$?
          if [ "$exit_code" = "302" ]; then
            echo "::error::Secret scan failed - secrets detected in code"
            exit 1
          fi

      # ---- QA Gates (Phase 5) ----
      - name: Format check
        shell: bash
        run: npx prettier --check .

      - name: Lint check
        shell: bash
        run: npx eslint . --max-warnings=0

      - name: Typecheck
        shell: bash
        run: npx tsc --noEmit

      - name: Unit tests
        shell: bash
        run: npm run test:unit

      - name: Integration tests
        shell: bash
        run: npm run test:integration

      # ---- Router validation and tests ----
      - name: Validate router configuration
        shell: bash
        run: node mcp/router.mjs --validate

      - name: Run router tests
        shell: bash
        run: npm run test:router

      # ---- Visual Regression Capture (Phase 6) ----
      - name: Start mock server for visual tests
        shell: bash
        run: |
          node mock/server.js &
          echo "MOCK_SERVER_PID=$!" >> $GITHUB_ENV
          sleep 2
          curl -s http://127.0.0.1:3000/health || exit 1

      - name: Capture AUV-0003 screenshots
        shell: bash
        run: node orchestration/visual/capture.mjs --auv AUV-0003

      - name: Capture AUV-0004 screenshots
        shell: bash
        run: node orchestration/visual/capture.mjs --auv AUV-0004

      - name: Capture AUV-0005 screenshots
        shell: bash
        run: node orchestration/visual/capture.mjs --auv AUV-0005

      - name: Compare AUV-0003 visual regression
        shell: bash
        run: |
          node orchestration/visual/compare.mjs --auv AUV-0003 || exit_code=$?
          if [ "$exit_code" = "303" ]; then
            echo "::error::Visual regression detected for AUV-0003"
            exit 1
          fi

      - name: Compare AUV-0004 visual regression
        shell: bash
        run: |
          node orchestration/visual/compare.mjs --auv AUV-0004 || exit_code=$?
          if [ "$exit_code" = "303" ]; then
            echo "::error::Visual regression detected for AUV-0004"
            exit 1
          fi

      - name: Compare AUV-0005 visual regression
        shell: bash
        run: |
          node orchestration/visual/compare.mjs --auv AUV-0005 || exit_code=$?
          if [ "$exit_code" = "303" ]; then
            echo "::error::Visual regression detected for AUV-0005"
            exit 1
          fi

      - name: Stop mock server for visual tests
        if: always()
        shell: bash
        run: |
          # Try to kill using saved PID first
          if [ ! -z "$MOCK_SERVER_PID" ]; then
            echo "Stopping mock server (PID: $MOCK_SERVER_PID)"
            kill $MOCK_SERVER_PID 2>/dev/null || true
            sleep 1
          fi

          # Ensure port 3000 is free (fallback method)
          if lsof -ti:3000 > /dev/null 2>&1; then
            echo "Killing process on port 3000"
            lsof -ti:3000 | xargs kill -9 2>/dev/null || true
            sleep 1
          fi

          echo "Mock server cleanup complete"

      # ---- Autopilot runs (single source of truth) ----
      # Clear security and visual results to avoid CVF failures from earlier scans
      - name: Clear security and visual results before autopilot
        shell: bash
        run: |
          rm -rf runs/security/
          rm -rf runs/visual/

      - name: AUV-0002 (autopilot)
        shell: bash
        run: node orchestration/cli.mjs AUV-0002

      - name: AUV-0003 (autopilot with strict CVF)
        shell: bash
        run: node orchestration/cli.mjs AUV-0003

      - name: AUV-0004 (autopilot with strict CVF)
        shell: bash
        run: node orchestration/cli.mjs AUV-0004

      - name: AUV-0005 (autopilot with strict CVF)
        shell: bash
        run: node orchestration/cli.mjs AUV-0005

      - name: Validate runbook cards
        if: always()
        shell: bash
        run: npm run validate:cards

      - name: Artifact consistency check
        if: always()
        shell: bash
        run: node orchestration/lib/artifact_consistency.mjs

      # ---- Strict CVF Checks (Phase 6) ----
      - name: Strict CVF for AUV-0003
        shell: bash
        run: node orchestration/cvf-check.mjs AUV-0003 --strict

      - name: Strict CVF for AUV-0004
        shell: bash
        run: node orchestration/cvf-check.mjs AUV-0004 --strict

      - name: Strict CVF for AUV-0005
        shell: bash
        run: node orchestration/cvf-check.mjs AUV-0005 --strict

      # ---- Phase 7: Packaging & Delivery ----
      - name: Package AUV-0005
        shell: bash
        run: node orchestration/cli.mjs package AUV-0005

      - name: Validate AUV-0005 manifest
        shell: bash
        run: npm run validate:manifest

      - name: Generate AUV-0005 report
        shell: bash
        run: node orchestration/cli.mjs report AUV-0005

      - name: Verify package bundle exists
        shell: bash
        run: |
          if [ ! -f "dist/AUV-0005/package.zip" ]; then
            echo "::error::Package bundle not found at dist/AUV-0005/package.zip"
            exit 1
          fi
          echo "✅ Package bundle verified"
          ls -lh dist/AUV-0005/

      # ---- Phase 11: Domain Validators ----
      - name: Run Phase 11 unit tests
        shell: bash
        run: |
          echo "Running Phase 11 validator unit tests..."
          node tests/unit/data_validator.test.mjs
          node tests/unit/chart_validator.test.mjs
          node tests/unit/seo_validator.test.mjs
          node tests/unit/media_validator.test.mjs
          node tests/unit/db_migration_validator.test.mjs

      - name: Run Phase 11 synthetic tests
        shell: bash
        run: |
          echo "Running Phase 11 synthetic tests..."
          node tests/agents/synthetic/data.ingest.test.mjs
          node tests/agents/synthetic/seo.audit.test.mjs
          node tests/agents/synthetic/video.compose.test.mjs
          node tests/agents/synthetic/db.migration.test.mjs

      - name: Run demo graphs for Phase 11
        shell: bash
        continue-on-error: true
        run: |
          echo "Running Phase 11 demo graphs..."
          export SWARM_MODE=deterministic
          if [ -f "orchestration/graph/projects/data-video-demo.yaml" ]; then
            node orchestration/graph/runner.mjs orchestration/graph/projects/data-video-demo.yaml --concurrency 2
          fi
          if [ -f "orchestration/graph/projects/seo-audit-demo.yaml" ]; then
            node orchestration/graph/runner.mjs orchestration/graph/projects/seo-audit-demo.yaml --concurrency 2
          fi

      - name: CVF domain validation (Phase 11)
        shell: bash
        continue-on-error: true
        run: |
          echo "Running CVF domain validation..."
          # Test domain validation with sample AUVs if they have domain artifacts
          if [ -d "runs/AUV-DATA-VIDEO-001" ]; then
            node orchestration/cvf-check.mjs AUV-DATA-VIDEO-001 --strict --domains data,charts,media
          fi
          if [ -d "runs/AUV-SEO-001" ]; then
            node orchestration/cvf-check.mjs AUV-SEO-001 --strict --domains seo
          fi

      - name: Verify report exists
        shell: bash
        run: |
          if [ ! -f "dist/AUV-0005/report.html" ]; then
            echo "::error::Report not found at dist/AUV-0005/report.html"
            exit 1
          fi
          echo "✅ Report verified"

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: auv-artifacts
          path: |
            runs/**
            test-results/**
            reports/**
            dist/**
