{
  "env": {
    "STAGING_URL": "http://localhost:3000",
    "API_BASE": "http://localhost:3000/api"
  },
  "permissions": {
    "allow": [
      "Read(./**)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(gh:*)",
      "Bash(git remote add:*)",
      "Bash(git branch:*)",
      "Bash(git remote set-url:*)",
      "Bash(git push:*)",
      "Bash(node:*)",
      "Bash(echo:*)",
      "Bash(if [ -f \"runs/observability/hooks.jsonl\" ])",
      "Bash(else echo \"No hooks log found\")",
      "Bash(fi)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cli.mjs AUV-0003)",
      "Bash(then echo \"Hooks log exists\")",
      "Bash(npm install)",
      "Bash(npm run validate:cards:*)",
      "Bash(npx ajv-cli:*)",
      "Bash(npm ci:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cli.mjs AUV-0101)",
      "Bash(npm run test:unit:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cli.mjs AUV-0102)",
      "Bash(npm pkg:*)",
      "Bash(npm install:*)"
    ],
    "deny": [
      "Read(./.env)",
      "Read(./.env.*)",
      "Read(./secrets/**)"
    ],
    "ask": []
  },
  "enableAllProjectMcpServers": true,
  "hooks": {
    "SessionStart": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/session_start.py",
            "timeout": 2
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/pre_tool.py",
            "timeout": 2
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/post_tool.py",
            "timeout": 2
          }
        ]
      }
    ],
    "SubagentStop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/subagent_stop.py",
            "timeout": 2
          }
        ]
      }
    ],
    "SessionEnd": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/session_end.py",
            "timeout": 2
          }
        ]
      }
    ]
  }
}