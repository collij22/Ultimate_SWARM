{
  "env": {
    "STAGING_URL": "http://localhost:3000",
    "API_BASE": "http://localhost:3000/api"
  },
  "permissions": {
    "allow": [
      "Read(./**)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(gh:*)",
      "Bash(git remote add:*)",
      "Bash(git branch:*)",
      "Bash(git remote set-url:*)",
      "Bash(git push:*)",
      "Bash(node:*)",
      "Bash(echo:*)",
      "Bash(if [ -f \"runs/observability/hooks.jsonl\" ])",
      "Bash(else echo \"No hooks log found\")",
      "Bash(fi)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cli.mjs AUV-0003)",
      "Bash(then echo \"Hooks log exists\")",
      "Bash(npm install)",
      "Bash(npm run validate:cards:*)",
      "Bash(npx ajv-cli:*)",
      "Bash(npm ci:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cli.mjs AUV-0101)",
      "Bash(npm run test:unit:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cli.mjs AUV-0102)",
      "Bash(npm pkg:*)",
      "Bash(npm install:*)",
      "Bash(mkdir:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/graph/runner.mjs orchestration/graph/projects/demo-validation.yaml --concurrency 3)",
      "Bash(curl:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/graph/runner.mjs orchestration/graph/projects/minimal-test.yaml)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/graph/runner.mjs orchestration/graph/projects/working-demo.yaml --concurrency 3)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node tests/integration/graph-parallelization.test.mjs)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/graph/runner.mjs orchestration/graph/projects/test-auv-id.yaml)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/graph/runner.mjs orchestration/graph/projects/test-auv-id.yaml --concurrency 2)",
      "Bash(export:*)",
      "Bash(npm run:*)",
      "Bash(ROUTER_DRY=true STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cli.mjs AUV-0003)",
      "Bash(VERCEL_API_KEY=test DATADOG_API_KEY=test node mcp/router.mjs --dry --agent C16.devops_engineer --capabilities deploy.preview --budget 0.05 --secondary-consent)",
      "Bash(SESSION_ID=test-session npm run router:dry)",
      "Bash(grep:*)",
      "Bash(timeout:*)",
      "Bash(git remote get-url:*)",
      "Bash(npx eslint:*)",
      "Bash(npx prettier:*)",
      "Bash(git stash:*)",
      "Bash(cat:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cvf-check.mjs AUV-0003 --strict)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 node orchestration/visual/capture.mjs --auv AUV-0003 --update-baseline)",
      "Bash(cd:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 node --trace-uncaught orchestration/visual/capture.mjs --auv AUV-0003 --update-baseline)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 node orchestration/visual/capture.mjs --auv AUV-0004 --update-baseline)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 node orchestration/visual/capture.mjs --auv AUV-0005 --update-baseline)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 node orchestration/visual/compare.mjs --auv AUV-0003)",
      "Bash(./test_server_cleanup.sh:*)",
      "Bash(pkill:*)",
      "Bash(tasklist)",
      "Bash(netstat:*)",
      "Bash(taskkill:*)",
      "Bash(npx tsc:*)",
      "Bash(sed:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cli.mjs AUV-0002)",
      "Bash(npx husky init:*)",
      "Bash(npx lint-staged:*)",
      "Bash(npm test:*)",
      "Bash(npx ajv validate:*)",
      "Bash(npx playwright test:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 AUV_ID=AUV-0002 npx playwright test tests/robot/playwright/auv-0002-ui.spec.ts --reporter=list)",
      "Bash(set FORCE_REGEN=1)",
      "Bash(git pull:*)",
      "Bash(git fetch:*)",
      "Bash(/dev/null)",
      "Bash(dir:*)",
      "Bash(NODE_OPTIONS=\"--max-old-space-size=4096\" timeout 30 npm run test:unit)",
      "Bash(git checkout:*)",
      "Bash(NODE_OPTIONS=\"--test-reporter=tap --test-timeout=5000\" node --test tests/unit)",
      "Bash(npm:*)",
      "Bash(if [ -d \"orchestration/engine\" ])",
      "Bash(then echo \"Engine directory exists\")",
      "Bash(else echo \"Engine directory MISSING\")",
      "Bash(test_phase8_e2e.bat)",
      "Bash(cmd /c:*)",
      "Bash(docker run:*)",
      "Bash(docker stop:*)",
      "Bash(set AUTH_REQUIRED=true)",
      "Bash(set AUTH_JWT_SECRET=dev-secret-please-change)",
      "Bash(./test_phase8_e2e.bat)",
      "Bash(if [ -d \".claude/knowledge\" ])",
      "Bash(then echo \"EXISTS\")",
      "Bash(else echo \"MISSING\")",
      "Bash(git rm:*)",
      "Bash(set TEST_MODE=true)",
      "Bash(set SWARM_MODE=deterministic)",
      "Bash(set DEMO_MODE=true)",
      "Bash(set RUN_ID=test-cvf-run)",
      "Bash(set RUN_ID=cvf-test-run)",
      "Bash(set RUN_ID=test-123)",
      "Bash(RUN_ID=cvf-test-run node orchestration/graph/runner.mjs orchestration/graph/projects/data-video-demo.yaml)",
      "Bash(RUN_ID=cvf-test-run TEST_MODE=true DEMO_MODE=true node orchestration/graph/runner.mjs orchestration/graph/projects/data-video-demo.yaml)",
      "Bash(TEST_MODE=true node orchestration/graph/runner.mjs orchestration/graph/projects/seo-audit-demo.yaml)",
      "Bash(del runsAUV-1201nul)",
      "Bash(set SWARM_MODE=claude)",
      "Bash(set SECONDARY_CONSENT=true)",
      "Bash(TEST_MODE=true node orchestration/graph/runner.mjs orchestration/graph/projects/payments-test-demo.yaml)",
      "Bash(find:*)",
      "Bash(TEST_MODE=true SWARM_MODE=claude SECONDARY_CONSENT=true node orchestration/graph/runner.mjs orchestration/graph/projects/payments-test-demo.yaml)",
      "Bash(TEST_MODE=true node orchestration/graph/runner.mjs orchestration/graph/projects/cloud-db-demo.yaml)",
      "Bash(TEST_MODE=true node -e \"\nconst { executeToolRequest } = require(''./orchestration/lib/tool_executor.mjs'');\nexecuteToolRequest({\n  tenant: ''default'',\n  runId: ''test'',\n  toolRequest: {\n    capability: ''cloud.db'',\n    input_spec: {\n      operation: ''create_schema'',\n      schema_name: ''test_schema'',\n      tables: []\n    }\n  },\n  selectedTools: [{tool_id: ''supabase'', capabilities: [''cloud.db'']}]\n}).then(r => console.log(JSON.stringify(r, null, 2)));\n\")",
      "Bash(TEST_MODE=true SWARM_MODE=claude SECONDARY_CONSENT=true node orchestration/graph/runner.mjs orchestration/graph/projects/cloud-db-demo.yaml)",
      "Bash(TEST_MODE=true SWARM_MODE=claude SECONDARY_CONSENT=true node orchestration/graph/runner.mjs orchestration/graph/projects/tts-cloud-demo.yaml)",
      "Bash(TEST_MODE=true SWARM_MODE=claude SECONDARY_CONSENT=true node orchestration/graph/runner.mjs orchestration/graph/projects/seo-audit-large.yaml)",
      "Bash(TEST_MODE=true node orchestration/cvf-check.mjs payments-test --strict)",
      "Bash(TEST_MODE=true SWARM_MODE=deterministic SECONDARY_CONSENT=true node orchestration/graph/runner.mjs orchestration/graph/projects/payments-test-demo.yaml)",
      "Bash(test_cloud_db.bat)"
    ],
    "deny": ["Read(./.env)", "Read(./.env.*)", "Read(./secrets/**)"],
    "ask": []
  },
  "enableAllProjectMcpServers": true,
  "hooks": {
    "SessionStart": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/session_start.py",
            "timeout": 2
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/pre_tool.py",
            "timeout": 2
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/post_tool.py",
            "timeout": 2
          }
        ]
      }
    ],
    "SubagentStop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/subagent_stop.py",
            "timeout": 2
          }
        ]
      }
    ],
    "SessionEnd": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/session_end.py",
            "timeout": 2
          }
        ]
      }
    ]
  }
}
