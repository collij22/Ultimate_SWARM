{
  "env": {
    "STAGING_URL": "http://localhost:3000",
    "API_BASE": "http://localhost:3000/api"
  },
  "permissions": {
    "allow": [
      "Read(./**)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(gh:*)",
      "Bash(git remote add:*)",
      "Bash(git branch:*)",
      "Bash(git remote set-url:*)",
      "Bash(git push:*)",
      "Bash(node:*)",
      "Bash(echo:*)",
      "Bash(if [ -f \"runs/observability/hooks.jsonl\" ])",
      "Bash(else echo \"No hooks log found\")",
      "Bash(fi)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cli.mjs AUV-0003)",
      "Bash(then echo \"Hooks log exists\")",
      "Bash(npm install)",
      "Bash(npm run validate:cards:*)",
      "Bash(npx ajv-cli:*)",
      "Bash(npm ci:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cli.mjs AUV-0101)",
      "Bash(npm run test:unit:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cli.mjs AUV-0102)",
      "Bash(npm pkg:*)",
      "Bash(npm install:*)",
      "Bash(mkdir:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/graph/runner.mjs orchestration/graph/projects/demo-validation.yaml --concurrency 3)",
      "Bash(curl:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/graph/runner.mjs orchestration/graph/projects/minimal-test.yaml)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/graph/runner.mjs orchestration/graph/projects/working-demo.yaml --concurrency 3)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node tests/integration/graph-parallelization.test.mjs)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/graph/runner.mjs orchestration/graph/projects/test-auv-id.yaml)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/graph/runner.mjs orchestration/graph/projects/test-auv-id.yaml --concurrency 2)",
      "Bash(export:*)",
      "Bash(npm run:*)",
      "Bash(ROUTER_DRY=true STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cli.mjs AUV-0003)",
      "Bash(VERCEL_API_KEY=test DATADOG_API_KEY=test node mcp/router.mjs --dry --agent C16.devops_engineer --capabilities deploy.preview --budget 0.05 --secondary-consent)",
      "Bash(SESSION_ID=test-session npm run router:dry)",
      "Bash(grep:*)",
      "Bash(timeout:*)",
      "Bash(git remote get-url:*)",
      "Bash(npx eslint:*)",
      "Bash(npx prettier:*)",
      "Bash(git stash:*)",
      "Bash(cat:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cvf-check.mjs AUV-0003 --strict)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 node orchestration/visual/capture.mjs --auv AUV-0003 --update-baseline)",
      "Bash(cd:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 node --trace-uncaught orchestration/visual/capture.mjs --auv AUV-0003 --update-baseline)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 node orchestration/visual/capture.mjs --auv AUV-0004 --update-baseline)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 node orchestration/visual/capture.mjs --auv AUV-0005 --update-baseline)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 node orchestration/visual/compare.mjs --auv AUV-0003)",
      "Bash(./test_server_cleanup.sh:*)",
      "Bash(pkill:*)",
      "Bash(tasklist)",
      "Bash(netstat:*)",
      "Bash(taskkill:*)",
      "Bash(npx tsc:*)",
      "Bash(sed:*)",
      "Bash(STAGING_URL=http://127.0.0.1:3000 API_BASE=http://127.0.0.1:3000/api node orchestration/cli.mjs AUV-0002)"
    ],
    "deny": [
      "Read(./.env)",
      "Read(./.env.*)",
      "Read(./secrets/**)"
    ],
    "ask": []
  },
  "enableAllProjectMcpServers": true,
  "hooks": {
    "SessionStart": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/session_start.py",
            "timeout": 2
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/pre_tool.py",
            "timeout": 2
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/post_tool.py",
            "timeout": 2
          }
        ]
      }
    ],
    "SubagentStop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/subagent_stop.py",
            "timeout": 2
          }
        ]
      }
    ],
    "SessionEnd": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "python scripts/hooks/session_end.py",
            "timeout": 2
          }
        ]
      }
    ]
  }
}