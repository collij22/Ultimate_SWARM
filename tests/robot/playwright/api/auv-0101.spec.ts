// Auto-generated by test_authoring.mjs — DO NOT EDIT
// hash:7b5e0cb81a67bf272811c9fcf4f3742952040094147f6ef63ee29d7bb8c01616 file:auv-0101.spec.ts

import { test, expect } from '@playwright/test';
  const API_BASE = process.env.API_BASE;
  
  test.describe('AUV-0101 API — custom', () => {
    test.skip(!API_BASE, 'API_BASE env var not set');
  
    test('list products', async ({ request }) => {
      const method = 'GET';
      const rawPath = '/';
      const normPath = rawPath.replace(/^\/api(?=\/|$)/, '');
      const url = `${API_BASE}${normPath}`;
      let res;
      if (method === 'POST') {
        res = await request.post(url, { data: {} });
      } else if (method === 'PUT') {
        res = await request.put(url, { data: {} });
      } else if (method === 'PATCH') {
        res = await request.patch(url, { data: {} });
      } else if (method === 'DELETE') {
        res = await request.delete(url);
      } else { // GET default
        res = await request.get(url);
      }
      const expected = 200;
      expect(res.status()).toBe(expected);
    });

test('search products', async ({ request }) => {
      const method = 'GET';
      const rawPath = '/?q=3';
      const normPath = rawPath.replace(/^\/api(?=\/|$)/, '');
      const url = `${API_BASE}${normPath}`;
      let res;
      if (method === 'POST') {
        res = await request.post(url, { data: {} });
      } else if (method === 'PUT') {
        res = await request.put(url, { data: {} });
      } else if (method === 'PATCH') {
        res = await request.patch(url, { data: {} });
      } else if (method === 'DELETE') {
        res = await request.delete(url);
      } else { // GET default
        res = await request.get(url);
      }
      const expected = 200;
      expect(res.status()).toBe(expected);
    });
  });
  