// Auto-generated by test_authoring.mjs — DO NOT EDIT
// hash:c42204abf950d1e090b9b9d7591025784ae6a0ca19daca67806a9701061d03dc file:auv-0101.spec.ts

// Auto-generated test for AUV-0101 - DO NOT EDIT
// Generated by orchestration/lib/test_authoring.mjs

import { test, expect } from '@playwright/test';
import fs from 'fs'; import path from 'path';
const STAGING_URL = process.env.STAGING_URL;
const AUV_ID = process.env.AUV_ID || 'AUV-0101';

test.describe('AUV-0101 UI — baseline', () => {
    test.skip(!STAGING_URL, 'STAGING_URL env var not set');
  
    test('page renders and search works', async ({ page }) => {
      await page.goto(`${STAGING_URL}/products.html`);
      const hasSearch = await page.$('#q');
      if (hasSearch) {
        await page.fill('#q', '3');
        const waitResp = page.waitForResponse(r => r.url().includes('/api/') && r.ok());
        await page.click('text=Apply');
        await waitResp;
      }
      await page.waitForFunction(() => document.querySelectorAll('[data-testid="product-card"]').length > 0);
      const cards = page.locator('[data-testid="product-card"]');
      await expect(cards.first()).toBeVisible();
  
      const dir = path.resolve(process.cwd(), 'runs', AUV_ID, 'ui');
      fs.mkdirSync(dir, { recursive: true });
      await page.screenshot({ path: path.join(dir, 'products_search.png') });
    });
  
    test('optional price bounds sanity', async ({ page }) => {
      await page.goto(`${STAGING_URL}/products.html`);
      const min = await page.$('#minPrice');
      const max = await page.$('#maxPrice');
      if (min && max) {
        await page.fill('#minPrice', '10');
        await page.fill('#maxPrice', '20');
        const waitResp = page.waitForResponse(r => r.url().includes('/api/') && r.ok());
        await page.click('text=Apply');
        await waitResp;
  
        const prices = page.locator('[data-testid="product-price"]');
        const count = await prices.count();
        if (count > 0) {
          for (let i=0;i<count;i++) {
            const t = await prices.nth(i).innerText();
            const num = parseFloat(t.replace('$',''));
            expect(num).toBeGreaterThanOrEqual(10);
            expect(num).toBeLessThanOrEqual(20);
          }
        }
      } else {
        test.skip();
      }
    });
  });
  