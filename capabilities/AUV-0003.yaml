id: AUV-0003
title: Product search, price bounds, and sorting
owner: web
status: active
tags: [ui, api, products]

acceptance:
  summary: >
    Users can filter products by text, constrain by min/max price, and sort results.
    API supports q, minPrice, maxPrice, sort; UI renders and navigates to detail.

# These are the spec paths the runbook will try to run (and auto-create if missing).
tests:
  playwright:
    - tests/robot/playwright/products-filter.spec.ts
  api:
    - tests/robot/playwright/api/products-filter.spec.ts

artifacts:
  required:
    - runs/AUV-0003/ui/products_search.png
    - runs/AUV-0003/perf/lighthouse.json

# Optional, but lets the generator produce meaningful tests.
authoring_hints:
  ui:
    page: /products.html
    search_input: '#q'
    min_price_input: '#minPrice'
    max_price_input: '#maxPrice'
    apply_button_text: 'Apply'
    card_selector: '[data-testid="product-card"]'
    title_selector: '[data-testid="product-title"]'
    price_selector: '[data-testid="product-price"]'
    screenshot: 'products_search.png'
  api:
    base_path: /products
    cases:
      - name: list returns 200 and array
        query: ''
        expect: list_ok
      - name: q=3 filters by title
        query: '?q=3'
        expect: 'id=demo-3'

# Phase 6: Performance budgets
perf_budgets:
  lcp_ms: 2500     # Largest Contentful Paint
  tti_ms: 3800     # Time to Interactive
  cls: 0.1         # Cumulative Layout Shift
  fcp_ms: 1800     # First Contentful Paint
  tbt_ms: 200      # Total Blocking Time
  si_ms: 3400      # Speed Index
  score: 0.9       # Overall performance score

# Phase 6: Visual regression
visual:
  routes:
    - id: products-search
      page: /products.html
      fullPage: true
      threshold:
        pixel_pct: 0.1  # Allow up to 0.1% pixel difference
      hideSelectors: []  # No dynamic elements to hide

# Phase 6: Security requirements
security:
  required: true
  scan_on_change: true
